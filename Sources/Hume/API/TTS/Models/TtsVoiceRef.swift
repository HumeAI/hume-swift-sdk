// This file is generated by generator.ts
import Foundation

public enum TtsVoiceRef: Codable, Hashable {
  case postedUtteranceVoiceWithId(PostedUtteranceVoiceWithId)
  case postedUtteranceVoiceWithName(PostedUtteranceVoiceWithName)

  public init(from decoder: Decoder) throws {
    let container = try decoder.singleValueContainer()
    if let postedUtteranceVoiceWithId = try? container.decode(PostedUtteranceVoiceWithId.self) {
      self = .postedUtteranceVoiceWithId(postedUtteranceVoiceWithId)
    } else if let postedUtteranceVoiceWithName = try? container.decode(
      PostedUtteranceVoiceWithName.self)
    {
      self = .postedUtteranceVoiceWithName(postedUtteranceVoiceWithName)
    } else {
      throw DecodingError.typeMismatch(
        TtsVoiceRef.self,
        DecodingError.Context(
          codingPath: decoder.codingPath,
          debugDescription: "Invalid value for TtsVoiceRef"
        )
      )
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch self {
    case .postedUtteranceVoiceWithId(let withId):
      try container.encode(withId)
    case .postedUtteranceVoiceWithName(let withName):
      try container.encode(withName)
    }
  }
}
