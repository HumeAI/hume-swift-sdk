// This file is generated by generator.ts
public struct PostedTts: Codable, Hashable {
  public let format: Format
  public let numGenerations: Int?
  public let splitUtterances: Bool?
  public let stripHeaders: Bool?
  public let utterances: [PostedUtterance]
    public let context: PostedContext?
    
    
    /// Initializes a new `PostedTts` instance.
    ///
    /// - Parameters:
    ///    - utterances: A list of Utterances to be converted to speech output. An Utterance is a unit of input for Octave, and includes input text, an optional description to serve as the prompt for how the speech should be delivered, an optional voice specification, and additional controls to guide delivery for speed and trailing_silence.
    ///     - format: Specifies the output audio file format. **Note**: Playback with `TTSPlayer` or `AudioHub` currently only supports `.wav`. Additional support for mp3 and pcm will be added later.
    ///    - numGenerations: Number of generations of the audio to produce.
    ///    - splitUtterances: Controls how audio output is segmented in the response. This setting affects how the snippets array is structured in the response, which may be important for applications that need to track the relationship between input text and generated audio segments. When setting to false, avoid including utterances with long text, as this can result in distorted output.
    ///    - stripHeaders: If enabled, the audio for all the chunks of a generation, once concatenated together, will constitute a single audio file. Otherwise, if disabled, each chunkâ€™s audio will be its own audio file, each with its own headers (if applicable).
    ///    - context: Utterances to use as context for generating consistent speech style and prosody across multiple requests. These will not be converted to speech output.
    public init(utterances: [PostedUtterance], format: Format = .wav, numGenerations: Int? = nil, splitUtterances: Bool? = nil, stripHeaders: Bool? = nil, context: PostedContext? = nil) {
        self.format = format
        self.numGenerations = numGenerations
        self.splitUtterances = splitUtterances
        self.stripHeaders = stripHeaders
        self.utterances = utterances
        self.context = context
    }
}
