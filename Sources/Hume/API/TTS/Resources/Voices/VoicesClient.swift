// This file is generated by generator.ts

import Foundation

public class Voices {

  private let options: HumeClient.Options

  init(options: HumeClient.Options) {
    self.options = options
  }

  public func create(
    access_token: String?, request: PostedVoice
  ) async throws -> ReturnVoice {
    guard var urlComponents = URLComponents(string: "https://\(self.options.base)/v0/tts/voices")
    else {
      throw URLError(.badURL)
    }

    guard let url = urlComponents.url else {
      throw URLError(.badURL)
    }

    var req = URLRequest(url: url)
    req.httpMethod = "POST"
    req.setValue(self.options.apiKey, forHTTPHeaderField: "X-Hume-Api-Key")
    req.setValue("application/json", forHTTPHeaderField: "Content-Type")

    // Prepare request body if needed
    if true {
      var requestBody: [String: Any] = [:]
      requestBody["request"] = request
      req.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
    }

    let session = URLSession(configuration: .default)
    let (data, _) = try await session.data(for: req)

    return try Defaults.decoder.decode(ReturnVoice.self, from: data)
  }

  public func list(
    provider: VoiceProvider, page_number: Int?, page_size: Int?, ascending_order: Bool?
  ) async throws -> ReturnPagedVoices {
    guard var urlComponents = URLComponents(string: "https://\(self.options.base)/v0/tts/voices")
    else {
      throw URLError(.badURL)
    }

    var queryItems: [URLQueryItem] = []
    if let provider = provider {
      queryItems.append(URLQueryItem(name: "provider", value: String(provider)))
    }
    if let page_number = page_number {
      queryItems.append(URLQueryItem(name: "page_number", value: String(page_number)))
    }
    if let page_size = page_size {
      queryItems.append(URLQueryItem(name: "page_size", value: String(page_size)))
    }
    if let ascending_order = ascending_order {
      queryItems.append(URLQueryItem(name: "ascending_order", value: String(ascending_order)))
    }
    urlComponents.queryItems = queryItems

    guard let url = urlComponents.url else {
      throw URLError(.badURL)
    }

    var req = URLRequest(url: url)
    req.httpMethod = "GET"
    req.setValue(self.options.apiKey, forHTTPHeaderField: "X-Hume-Api-Key")
    req.setValue("application/json", forHTTPHeaderField: "Content-Type")

    // Prepare request body if needed
    if false {
      var requestBody: [String: Any] = [:]

      req.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
    }

    let session = URLSession(configuration: .default)
    let (data, _) = try await session.data(for: req)

    return try Defaults.decoder.decode(ReturnPagedVoices.self, from: data)
  }

  public func delete(
    name: String
  ) async throws {
    guard var urlComponents = URLComponents(string: "https://\(self.options.base)/v0/tts/voices")
    else {
      throw URLError(.badURL)
    }

    guard let url = urlComponents.url else {
      throw URLError(.badURL)
    }

    var req = URLRequest(url: url)
    req.httpMethod = "DELETE"
    req.setValue(self.options.apiKey, forHTTPHeaderField: "X-Hume-Api-Key")
    req.setValue("application/json", forHTTPHeaderField: "Content-Type")

    // Prepare request body if needed
    if false {
      var requestBody: [String: Any] = [:]

      req.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
    }

    let session = URLSession(configuration: .default)
    let (data, _) = try await session.data(for: req)

    return ()
  }

}
