//
//  Configs.swift
//
//
//  This file was auto-generated by Fern from our API Definition.
//

import Foundation

public class Configs {
    
    private let decoder = JSONDecoder()
    
    private let options: HumeClient.Options
    
    init(options: HumeClient.Options) {
        self.options = options
    }
    
    func listConfigs(pageNumber: Int? = nil, pageSize: Int? = nil, restrictToMostRecent: Bool? = nil) async throws -> ReturnPagedConfigs {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs",
            headers: [
                "X-Hume-Api-Key" : options.apiKey
            ],
            queryParams: [
                "page_number" : pageNumber,
                "page_size" : pageSize,
                "restrict_to_most_recent" : restrictToMostRecent
            ]
        )
        
        do {
            let data = try await request.perform(method: "GET")
            return try decoder.decode(ReturnPagedConfigs.self, from: data)
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func createConfig(name: String, versionDescription: String? = nil, prompt: PostedPromptSpec? = nil, voice: PostedVoice? = nil, languageModel: PostedLanguageModel? = nil, tools: [PostedUserDefinedToolSpec?]? = nil, builtinTools: [PostedBuiltinTool]? = nil
    ) async throws -> ReturnConfig {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs",
            headers: [
                "X-Hume-Api-Key" : options.apiKey,
                "Content-Type" : "application/json",
            ]
        )
        
        let body = PostedConfig(
            name: name,
            versionDescription: versionDescription,
            prompt: prompt, 
            voice: voice, 
            languageModel: languageModel, 
            tools: tools,
            builtinTools: builtinTools
        )
        
        do {
            let data = try await request.perform(method: "POST", body: body)
            return try decoder.decode(ReturnConfig.self, from: data)
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func listConfigVersions(id: String, pageNumber: Int? = nil, pageSize: Int? = nil, restrictToMostRecent: Bool? = nil) async throws -> ReturnPagedConfigs {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs/\(id)",
            headers: [
                "X-Hume-Api-Key" : options.apiKey
            ],
            queryParams: [
                "page_number" : pageNumber,
                "page_size" : pageSize,
                "restrict_to_most_recent" : restrictToMostRecent
            ]
        )
        
        do {
            let data = try await request.perform(method: "GET")
            return try decoder.decode(ReturnPagedConfigs.self, from: data)
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func createConfigVersion(id: String, versionDescription: String? = nil, prompt: PostedPromptSpec? = nil, voice: PostedVoice? = nil, languageModel: PostedLanguageModel? = nil, tools: [PostedUserDefinedToolSpec?]? = nil, builtinTools: [PostedBuiltinTool?]? = nil) async throws -> ReturnConfig {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs/\(id)",
            headers: [
                "X-Hume-Api-Key" : options.apiKey,
                "Content-Type" : "application/json",
            ]
        )
        
        let body = PostedConfigVersion(
            versionDescription: versionDescription,
            prompt: prompt,
            voice: voice,
            languageModel: languageModel,
            tools: tools,
            builtinTools: builtinTools
        )
        
        do {
            let data = try await request.perform(method: "POST", body: body)
            return try decoder.decode(ReturnConfig.self, from: data)
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func deleteConfig(id: String) async throws {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs/\(id)",
            headers: [
                "X-Hume-Api-Key" : options.apiKey,
            ]
        )
        
        do {
            try await request.perform(method: "DELETE")
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func updateConfigName(id: String, name: String) async throws {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs/\(id)",
            headers: [
                "X-Hume-Api-Key" : options.apiKey,
                "Content-Type" : "application/json",
            ]
        )
        
        let body = PostedConfigName(
            name: name
        )
        
        do {
            try await request.perform(method: "PATCH", body: body)
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func getConfigVersion(id: String, version: Int) async throws -> ReturnConfig {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs/\(id)/version/\(version)",
            headers: [
                "X-Hume-Api-Key" : options.apiKey,
            ]
        )
        
        do {
            let data = try await request.perform(method: "GET")
            return try decoder.decode(ReturnConfig.self, from: data)
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func deleteConfigVersion(id: String, version: Int) async throws {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs/\(id)/version/\(version)",
            headers: [
                "X-Hume-Api-Key" : options.apiKey,
            ]
        )
        
        do {
            try await request.perform(method: "DELETE")
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
    func updateConfigDescription(id: String, version: Int, versionDescription: String? = nil) async throws -> ReturnConfig {
        
        let request = HttpRequest(
            "https://api.hume.ai/v0/evi/configs/\(id)/version/\(version)",
            headers: [
                "X-Hume-Api-Key" : options.apiKey,
                "Content-Type" : "application/json",
            ]
        )
        
        let body = PostedConfigVersionDescription(
            versionDescription: versionDescription
        )
        
        do {
            let data = try await request.perform(method: "PATCH", body: body)
            return try decoder.decode(ReturnConfig.self, from: data)
        } catch let error as HttpRequest.RequestError {
            throw try decoder.decode(HumeError.self, from: error.data ?? Data())
        } catch {
            throw error
        }
        
    }
    
}
